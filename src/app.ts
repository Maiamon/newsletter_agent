import { createLoadNewsFromJsonUseCase } from './use-cases/loadNewsFromSource';
import { DBRepository } from './repositories/db/db_repository';
import path from 'path';

/**
 * Aplica√ß√£o principal para processar not√≠cias do JSON e inserir no banco
 */
class NewsletterApp {
  private dbRepository: DBRepository;

  constructor() {
    this.dbRepository = new DBRepository();
  }
  
  /**
   * Executa o processo completo de carregamento e inser√ß√£o de not√≠cias
   */
  async run(): Promise<void> {
    console.log('üöÄ === Newsletter Agent - Iniciando Aplica√ß√£o ===\n');

    try {
      // 1. Conectar ao banco de dados
      console.log('üîå Conectando ao banco de dados...');
      const connected = await this.dbRepository.testConnection();
      
      if (!connected) {
        console.error('‚ùå Falha na conex√£o com o banco de dados');
        console.error('   Certifique-se de que o PostgreSQL est√° rodando');
        process.exit(1);
      }
      
      console.log('‚úÖ Conex√£o com banco estabelecida\n');

      // 2. Carregar not√≠cias do arquivo JSON
      console.log('üìÅ Carregando not√≠cias do arquivo source-data.json...');
      const loadNewsUseCase = createLoadNewsFromJsonUseCase();
      const loadResult = await loadNewsUseCase.execute();

      // Verificar se houve erros no carregamento
      if (loadResult.errors.length > 0) {
        console.warn('‚ö†Ô∏è Erros durante carregamento:');
        loadResult.errors.forEach(error => console.warn(`   - ${error}`));
      }

      if (loadResult.news.length === 0) {
        console.warn('‚ö†Ô∏è Nenhuma not√≠cia foi carregada do arquivo');
        return;
      }

      console.log(`‚úÖ ${loadResult.news.length} not√≠cias carregadas do arquivo\n`);

      // 3. Inserir not√≠cias no banco de dados
      console.log('üíæ Inserindo not√≠cias no banco de dados...');
      const insertResults = await this.insertMultipleNews(loadResult.news);

      // Contar sucessos e falhas
      const successCount = insertResults.filter((result: any) => result !== null).length;
      const failureCount = insertResults.length - successCount;

      console.log(`\nüìä === Relat√≥rio Final ===`);
      console.log(`üìÅ Arquivo processado: ${loadResult.metadata.sourceInfo.location}`);
      console.log(`üìè Tamanho do arquivo: ${this.formatBytes(loadResult.metadata.sourceInfo.size || 0)}`);
      console.log(`‚è±Ô∏è Tempo de carregamento: ${loadResult.metadata.executionTimeMs}ms`);
      console.log(`üîç Total encontrado no arquivo: ${loadResult.metadata.totalFound}`);
      console.log(`üì∞ Total carregado: ${loadResult.metadata.totalLoaded}`);
      console.log(`‚úÖ Inseridas com sucesso: ${successCount}`);
      
      if (failureCount > 0) {
        console.log(`‚ùå Falhas na inser√ß√£o: ${failureCount}`);
      }
      
      console.log(`\nüéâ Processamento conclu√≠do com sucesso!`);

      // 4. Mostrar algumas estat√≠sticas do banco
      await this.showDatabaseStats();

    } catch (error) {
      console.error('‚ùå Erro fatal durante execu√ß√£o:', error);
      process.exit(1);
    } finally {
      // Fechar conex√£o com o banco
      await this.dbRepository.close();
      console.log('\nüëã Aplica√ß√£o finalizada');
    }
  }

  /**
   * Insere m√∫ltiplas not√≠cias no banco
   */
  private async insertMultipleNews(newsArray: any[]): Promise<(any | null)[]> {
    console.log(`üì∞ Salvando ${newsArray.length} not√≠cias...`);
    
    const results: (any | null)[] = [];
    
    for (const news of newsArray) {
      try {
        const result = await this.dbRepository.insertNews(news);
        results.push(result);
        
        if (result) {
          console.log(`‚úÖ Not√≠cia salva: "${result.title}"`);
        }
        
        // Pequena pausa para n√£o sobrecarregar o banco
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`‚ùå Erro ao salvar "${news.title}":`, error);
        results.push(null);
      }
    }

    const successCount = results.filter(r => r !== null).length;
    console.log(`‚úÖ ${successCount}/${newsArray.length} not√≠cias salvas com sucesso`);
    
    return results;
  }

  /**
   * Mostra estat√≠sticas do banco de dados
   */
  private async showDatabaseStats(): Promise<void> {
    try {
      console.log('\nüìà === Estat√≠sticas do Banco ===');
      
      const allNews = await this.dbRepository.getAllNews();
      const allCategories = await this.dbRepository.getAllCategories();
      
      console.log(`üì∞ Total de not√≠cias no banco: ${allNews.length}`);
      console.log(`üè∑Ô∏è Total de categorias: ${allCategories.length}`);
      
      if (allCategories.length > 0) {
        console.log(`üìã Categorias dispon√≠veis: ${allCategories.map((cat: any) => cat.name).join(', ')}`);
      }

      // Mostrar √∫ltimas not√≠cias inseridas
      if (allNews.length > 0) {
        console.log('\nüì∞ √öltimas not√≠cias no banco:');
        allNews.slice(0, 3).forEach((news: any, index: number) => {
          console.log(`${index + 1}. ${news.title}`);
          console.log(`   üìÖ ${new Date(news.published_at).toLocaleString('pt-BR')}`);
          console.log(`   üè∑Ô∏è ${news.categories.map((c: any) => c.name).join(', ')}`);
        });
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel obter estat√≠sticas do banco:', error);
    }
  }

  /**
   * Formata bytes em formato leg√≠vel
   */
  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

/**
 * Fun√ß√£o principal - ponto de entrada da aplica√ß√£o
 */
async function main() {
  const app = new NewsletterApp();
  await app.run();
}

// Executar aplica√ß√£o se chamada diretamente
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• Erro n√£o tratado:', error);
    process.exit(1);
  });
}

export { NewsletterApp, main };
